# The workflow builds if the test workflow succeeds.

name: Build

on:
  workflow_run:
    workflows: [Test]
    types: [completed]

jobs:
  on-success:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - run: echo 'The triggering workflow passed'

  createrelease:
    name: Create Release
    runs-on: [ubuntu-latest]
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    steps:
      - run: echo 'triggering worflow has failed'

  buildpackages:
    name: Build packages
    needs: createrelease
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            TARGET: windows
            CMD_BUILD: pyinstaller -F -w src/gameoflife/main.py 
            OUT_FILE_NAME: src/gameoflife.exe
            ASSET_MIME: application/vnd.microsoft.portable-executable
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      #Set up python
      - name: Set up Python 3.x
        uses: actions/setup-python@v3
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.10'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'
      # You can test your matrix by printing the current Python version
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      # Setup Poetry
      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -

      - name: Display Poetry version
        run: poetry --version

      - name: Install project dependencies
        run: poetry install -vv

      - name: Build with pyinstaller for ${{matrix.TARGET}}
        run: ${{matrix.CMD_BUILD}}

      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        shell: bash
        run: |
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./dist/${{ matrix.OUT_FILE_NAME}}
          asset_name: ${{ matrix.OUT_FILE_NAME}}
          asset_content_type: ${{ matrix.ASSET_MIME}}